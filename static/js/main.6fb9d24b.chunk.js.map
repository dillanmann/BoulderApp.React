{"version":3,"sources":["apollo.js","CreationModal.js","Constants/QueriesConstants.js","Constants/MutationConstants.js","DeleteButton.js","Home.js","CenterDetails.js","CircuitDetails.js","ProblemDetails.js","App.js","serviceWorker.js","index.js"],"names":["ApolloClient","uri","show","title","handleClose","onSuccess","createInputFromState","mutation","Body","useMutation","variables","onCompleted","mutate","Modal","Header","Title","Footer","Button","variant","onClick","GET_CENTERS","gql","GET_CENTER_BY_ID","GET_PROBLEM_BY_ID","GET_VGRADES","GET_CIRCUIT_BY_ID","DELETE_CIRCUIT_BY_ID","DELETE_CENTER_BY_ID","CREATE_CIRCUIT_IN_CENTER","CREATE_PROBLEM_IN_CIRCUIT","DELETE_PROBLEM_BY_ID","CREATE_CENTER","itemId","afterDelete","text","IconComponent","id","deleteItem","e","preventDefault","stopPropagation","Home","props","onStateChange","evt","setState","target","name","value","setShowAddCenterModal","state","showAddCenterModal","input","centerName","AddCenterModalBody","Form","Group","Label","Control","type","onChange","history","query","loading","data","refetch","Container","CreationModal","style","maxHeight","overflow","margin","CardColumns","centers","map","center","Card","key","bg","width","Text","circuits","length","Row","Col","xs","push","offset","span","DeleteButton","React","Component","CenterDetails","centerId","circuit","circuitName","dateUp","circuitUpDate","dateDown","circuitDownDate","setShowAddCircuitModal","showAddCircuitModal","AddCircuitModalBody","this","ListGroup","Item","action","problems","goBack","CircuitDetails","circuitId","problem","problemName","grade","problemGrade","setShowAddProblemModal","showAddProblemModal","AddProblemModalBody","useQuery","as","vGrades","Table","useHistory","createBrowserHistory","App","client","Navbar","Brand","href","path","exact","children","x","match","params","ProblemDetails","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6fb9d24b.chunk.js","sourcesContent":["import ApolloClient from 'apollo-boost';\r\n\r\nexport default new ApolloClient(\r\n  {\r\n    uri: \"https://boulderapp.azurewebsites.net/graphql\",\r\n  }\r\n);","import React from 'react';\r\nimport { Button, Modal } from 'react-bootstrap';\r\nimport { useMutation } from '@apollo/react-hooks';\r\n\r\nexport default ( { show, title, handleClose, onSuccess, createInputFromState, mutation, Body } ) => {\r\n\r\n    const [ mutate ] = useMutation(mutation, \r\n    { \r\n        variables: createInputFromState(),\r\n        onCompleted: () => onSuccess()            \r\n    });\r\n\r\n    const handleClick = () => mutate();\r\n    \r\n    return(        \r\n        <Modal show={show}>\r\n            <Modal.Header>\r\n                <Modal.Title>{title}</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <Body />\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button variant='secondary' onClick={handleClose}>Close</Button>\r\n                <Button variant='primary' onClick={handleClick}>Add</Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n        );\r\n}\r\n","import gql from 'graphql-tag';\r\n\r\nexport const GET_CENTERS = gql`\r\n  query {\r\n    centers {\r\n      name\r\n      id\r\n      circuits{\r\n        name\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const GET_CENTER_BY_ID =\r\n    gql`\r\n    query GetCenterById($id: ID!){\r\n        center(id: $id){\r\n            name\r\n            circuits{\r\n                name\r\n                id\r\n                problems{\r\n                    id\r\n                }\r\n            }\r\n        }\r\n    }`;\r\n\r\nexport const GET_PROBLEM_BY_ID =\r\n    gql`\r\n    query GetProblemById($id: ID!){\r\n        problem(id: $id){\r\n            name\r\n            id\r\n            grade\r\n        }\r\n    }`;\r\n\r\nexport const GET_VGRADES = \r\n    gql`{ vGrades }`;\r\n\r\nexport const GET_CIRCUIT_BY_ID =\r\n    gql`\r\n    query GetCircuitById($id: ID!){\r\n        circuit(id: $id){\r\n            name\r\n            problems{\r\n                id\r\n                name\r\n                grade\r\n            }\r\n        }\r\n    }`;\r\n","import gql from 'graphql-tag';\r\n\r\nexport const DELETE_CIRCUIT_BY_ID = \r\n    gql`\r\n    mutation DeleteCircuitById($id: ID!){\r\n        deleteCircuit(id: $id){\r\n            result\r\n        }\r\n    }`;\r\n\r\nexport const DELETE_CENTER_BY_ID =\r\n    gql`\r\n        mutation DeleteCenterById($id: ID!){\r\n            deleteCenter(id: $id){\r\n                result\r\n            }\r\n        }\r\n    `;\r\n\r\nexport const CREATE_CIRCUIT_IN_CENTER =\r\n    gql`\r\n    mutation CreateCircuitInCenter($input: CreateCircuitInCenterInput!){\r\n        createCircuitInCenter(input: $input){\r\n            name\r\n        }\r\n    }\r\n    `;\r\n\r\nexport const CREATE_PROBLEM_IN_CIRCUIT = \r\n    gql`\r\n    mutation CreateProblemInCircuit($input: CreateProblemInCircuitInput!){\r\n        createProblemInCircuit(input: $input){\r\n          name\r\n        }\r\n      }`;\r\n\r\nexport const DELETE_PROBLEM_BY_ID = \r\n    gql`\r\n    mutation DeleteProblemById($id: ID!){\r\n        deleteProblem(id: $id){\r\n            result\r\n        }\r\n    }`;\r\n\r\nexport const CREATE_CENTER = \r\n    gql`\r\n        mutation CreateCenter($input: CenterInput!){\r\n            createCenter(center: $input){\r\n                name\r\n            }\r\n        }\r\n    `;","import React from 'react';\r\nimport { Button } from 'react-bootstrap';\r\nimport { useMutation } from '@apollo/react-hooks';\r\n\r\nexport default ( { mutation, itemId, afterDelete, text, IconComponent } ) => {\r\n    const [deleteItem] = useMutation(mutation, { variables: {id: itemId }, onCompleted: () => afterDelete()});\r\n    return(\r\n        <Button variant=\"danger\" onClick={e => {\r\n            e.preventDefault();\r\n            e.stopPropagation();\r\n            deleteItem({});\r\n        }} >\r\n        {\r\n            text != null ? text : <IconComponent/>\r\n        }\r\n        </Button>\r\n    )\r\n}","import React from 'react';\r\nimport { Query } from 'react-apollo';\r\nimport { Button, Card, Container, Row, Col, Form, CardColumns } from 'react-bootstrap';\r\nimport { FaTrash } from 'react-icons/fa';\r\n\r\nimport CreationModal from './CreationModal'\r\nimport { GET_CENTERS } from './Constants/QueriesConstants';\r\nimport { CREATE_CENTER, DELETE_CENTER_BY_ID } from './Constants/MutationConstants';\r\nimport DeleteButton from './DeleteButton';\r\n\r\nclass Home extends React.Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.history = props.history;\r\n    this.state = {\r\n      showAddCenterModal: false,\r\n      centerName: ''\r\n    };\r\n  }\r\n\r\n  onStateChange = evt => this.setState({ [evt.target.name]: evt.target.value });\r\n  setShowAddCenterModal = state => this.setState( { showAddCenterModal: state } )\r\n\r\n  createInputFromState = () => ({\r\n    input: {\r\n        name: this.state.centerName\r\n      }\r\n    });\r\n\r\n  AddCenterModalBody = () => {\r\n    return (\r\n    <Form>\r\n        <Form.Group>\r\n            <Form.Label>Center name</Form.Label>\r\n            <Form.Control type='text' name='centerName' onChange={this.onStateChange} value={this.state.centerName} />\r\n        </Form.Group>\r\n    </Form>)\r\n}\r\n\r\n  render(){\r\n      return (<Query query={GET_CENTERS}>\r\n        {({ loading, data, refetch }) => !loading && (\r\n          <Container>\r\n          <CreationModal \r\n                    show={this.state.showAddCenterModal}\r\n                    title='Add Center'\r\n                    handleClose={() => this.setShowAddCenterModal(false)}\r\n                    onChange={this.onStateChange}\r\n                    onSuccess={() => {\r\n                        this.setShowAddCenterModal(false);\r\n                        refetch();\r\n                    }}\r\n                    createInputFromState={this.createInputFromState}\r\n                    mutation={CREATE_CENTER}\r\n                    Body={this.AddCenterModalBody}\r\n                />\r\n          <div style={{ maxHeight: 'calc(100vh - 200px)', overflow: 'auto', margin: '5px'}}>\r\n          <CardColumns>\r\n          {data.centers.map(center => (\r\n              <Card key={center.id} bg=\"dark\" text=\"white\" style={{ width: '18rem' }}>\r\n                <Card.Body>\r\n                  <Card.Title>{center.name}</Card.Title>\r\n                  <Card.Text>Circuits: {center.circuits.length}</Card.Text>\r\n                  <Row>\r\n                    <Col xs={4}>\r\n                      <Button variant=\"primary\" onClick={() => this.history.push(\"/center/\" + center.id)}>\r\n                        View                \r\n                      </Button>\r\n                    </Col>\r\n                    <Col xs={{ offset: 5, span: 3}}>\r\n                      <DeleteButton mutation={DELETE_CENTER_BY_ID} itemId={center.id} afterDelete={refetch} IconComponent={() => <FaTrash/>}/>\r\n                    </Col>\r\n                  </Row>\r\n                </Card.Body>\r\n              </Card>\r\n          ))}\r\n          </CardColumns>\r\n          </div>\r\n          <Button variant='success' onClick={() => this.setShowAddCenterModal(true)}>Add Center</Button>\r\n          </Container>\r\n        )}\r\n      </Query>\r\n      )\r\n      }\r\n}\r\n\r\nexport default Home;","import React from 'react';\r\nimport { Query } from 'react-apollo';\r\nimport { Container, ListGroup, Col, Row, Button, Form } from 'react-bootstrap';\r\nimport DeleteButton from './DeleteButton';\r\nimport CreationModal from './CreationModal';\r\nimport { GET_CENTER_BY_ID } from './Constants/QueriesConstants';\r\nimport { CREATE_CIRCUIT_IN_CENTER, DELETE_CENTER_BY_ID } from './Constants/MutationConstants';\r\n\r\nclass CenterDetails extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.history = props.history;\r\n        this.id = props.id;\r\n        this.state = {\r\n            showAddCircuitModal: false,\r\n            circuitName: '',\r\n            circuitUpDate: '',\r\n            circuitDownDate: ''\r\n        }\r\n    }\r\n\r\n    createInputFromState = () => ({\r\n        input: {\r\n            centerId: this.id,\r\n            circuit: {\r\n              name: this.state.circuitName,\r\n              dateUp: this.state.circuitUpDate,\r\n              dateDown: this.state.circuitDownDate\r\n            },\r\n          }        \r\n    });\r\n    onStateChange = evt => this.setState({ [evt.target.name]: evt.target.value });\r\n    setShowAddCircuitModal = state => this.setState( { showAddCircuitModal: state } )\r\n\r\n    AddCircuitModalBody = () => {\r\n        return (\r\n        <Form>\r\n            <Form.Group>\r\n                <Form.Label>Circuit name</Form.Label>\r\n                <Form.Control type='text' name='circuitName' onChange={this.onStateChange} value={this.state.circuitName}></Form.Control>\r\n            </Form.Group>\r\n            <Form.Group>\r\n                <Form.Label>Date set</Form.Label>\r\n                <Form.Control type='date' name='circuitUpDate' onChange={this.onStateChange} value={this.state.circuitUpDate}></Form.Control>\r\n            </Form.Group>\r\n            <Form.Group>\r\n                <Form.Label>Date down</Form.Label>\r\n                <Form.Control type='date' name='circuitDownDate' onChange={this.onStateChange} value={this.state.circuitDownDate}></Form.Control>\r\n            </Form.Group>\r\n        </Form>)\r\n    }\r\n\r\n    render(){\r\n        const id = this.id;\r\n        return (\r\n            <Query query={GET_CENTER_BY_ID} variables={{id}}>\r\n            {({ loading, data, refetch }) => !loading && (\r\n                <Container>\r\n                <CreationModal \r\n                    show={this.state.showAddCircuitModal}\r\n                    title='Add Circuit'\r\n                    handleClose={() => this.setShowAddCircuitModal(false)}\r\n                    onChange={this.onStateChange}\r\n                    onSuccess={() => {\r\n                        this.setShowAddCircuitModal(false);\r\n                        refetch();\r\n                    }}\r\n                    createInputFromState={this.createInputFromState}\r\n                    mutation={CREATE_CIRCUIT_IN_CENTER}\r\n                    Body={this.AddCircuitModalBody}\r\n                />\r\n                <div>\r\n                    <h1>{data.center.name}</h1>\r\n                    <h4>Circuits</h4>\r\n                    <div style={{ maxHeight: 'calc(100vh - 200px)', overflow: 'auto', margin: '5px'}}>\r\n                        <ListGroup>\r\n                            {data.center.circuits.map(circuit => \r\n                            (\r\n                                <ListGroup.Item key={circuit.id} action onClick={() => this.history.push(\"/circuit/\" + circuit.id)}>\r\n                                <Row>\r\n                                    <Col>{circuit.name}</Col>\r\n                                    <Col>Problems: {circuit.problems.length}</Col>\r\n                                </Row>       \r\n                                </ListGroup.Item>\r\n                            ))}\r\n                        </ListGroup>\r\n                    </div>\r\n                </div>\r\n                <Row>\r\n                    <Col xs={4}>\r\n                    <Button variant='success' onClick={() => this.setShowAddCircuitModal(true)}>Add Circuit</Button>\r\n                    <DeleteButton mutation={DELETE_CENTER_BY_ID} itemId={id} afterDelete={() => this.history.goBack()} text='Delete Center'/>\r\n                    </Col>\r\n                    <Col xs={7}/>\r\n                    <Col xs={1}>\r\n                        <Button onClick={() => this.history.goBack()}>Back</Button>\r\n                    </Col>\r\n                </Row>\r\n                </Container>\r\n            )}\r\n            </Query>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CenterDetails;","import React from 'react';\r\nimport { Query } from 'react-apollo';\r\nimport { Container, Table,  Row, Col, Button, Form } from 'react-bootstrap';\r\nimport { FaTrash } from 'react-icons/fa';\r\nimport { useQuery } from '@apollo/react-hooks';\r\n\r\nimport DeleteButton from './DeleteButton';\r\nimport CreationModal from './CreationModal';\r\nimport { GET_CIRCUIT_BY_ID, GET_VGRADES } from './Constants/QueriesConstants';\r\nimport { CREATE_PROBLEM_IN_CIRCUIT, DELETE_CIRCUIT_BY_ID, DELETE_PROBLEM_BY_ID } from './Constants/MutationConstants';\r\n\r\nclass CircuitDetails extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.history = props.history;\r\n        this.id = props.id;\r\n        this.state = {\r\n            showAddProblemModal: false,\r\n            problemName: '',\r\n            problemGrade: ''\r\n        }\r\n    }\r\n    \r\n    \r\n    createInputFromState = () => ({\r\n        input: {\r\n            circuitId: this.id,\r\n            problem: {\r\n              name: this.state.problemName,\r\n              grade: this.state.problemGrade,\r\n            },\r\n          }        \r\n    });    \r\n\r\n    onStateChange = evt => this.setState({ [evt.target.name]: evt.target.value });\r\n    setShowAddProblemModal = state => this.setState( { showAddProblemModal: state } )\r\n    render(){\r\n    let id = this.props.id;\r\n\r\n    return (\r\n        <Query query={GET_CIRCUIT_BY_ID} variables={{id}}>\r\n        {({ loading, data, refetch }) => !loading && (\r\n            <Container>\r\n                <CreationModal \r\n                    show={this.state.showAddProblemModal}\r\n                    title='Add Problem'\r\n                    handleClose={() => this.setShowAddProblemModal(false)}\r\n                    onChange={this.onStateChange}\r\n                    onSuccess={() => {\r\n                        this.setShowAddProblemModal(false);\r\n                        refetch();\r\n                    }}\r\n                    createInputFromState={this.createInputFromState}\r\n                    mutation={CREATE_PROBLEM_IN_CIRCUIT}\r\n                    Body={this.AddProblemModalBody}\r\n                />\r\n                <div>\r\n                    <h1>{data.circuit.name}</h1>\r\n                    <h4>Problems</h4>\r\n                    <div style={{ maxHeight: 'calc(100vh - 200px)', overflow: 'auto', margin: '5px'}}>\r\n                    <Table>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Name</th>\r\n                            <th>Grade</th>\r\n                            <th/>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                    {data.circuit.problems.map(problem => \r\n                    {\r\n                        return(\r\n                            <tr key={problem.id} onClick={() => this.history.push(\"/problem/\" + problem.id)}>\r\n                                <td>{problem.name}</td>\r\n                                <td>{problem.grade}</td>\r\n                                <td>                      \r\n                                    <DeleteButton mutation={DELETE_PROBLEM_BY_ID} itemId={problem.id} afterDelete={() => refetch()} IconComponent={() => <FaTrash/>} />\r\n                                </td>\r\n                            </tr>\r\n                        )\r\n                        })}\r\n                    </tbody>                \r\n                    </Table>\r\n                    </div>\r\n                        <Row>\r\n                            <Col xs={4}>\r\n                            <Button variant='success' onClick={() => this.setShowAddProblemModal(true)}>Add Problem</Button>\r\n                            <DeleteButton mutation={DELETE_CIRCUIT_BY_ID} itemId={id} afterDelete={() => this.history.goBack()} text='Delete Circuit'/>\r\n                            </Col>\r\n                            <Col xs={7}/>\r\n                            <Col xs={1}>\r\n                                <Button onClick={() => this.history.goBack()}>Back</Button>\r\n                            </Col>\r\n                        </Row>\r\n                </div>\r\n            </Container>\r\n        )}\r\n    </Query>\r\n        )\r\n    }\r\n\r\n    AddProblemModalBody = () => {\r\n        let { data, loading } = useQuery(GET_VGRADES);\r\n\r\n        if (loading) return <p>Loading...</p>\r\n\r\n        return(\r\n        <Form>\r\n            <Form.Group>\r\n                <Form.Label>Problem name</Form.Label>\r\n                <Form.Control type='text' name='problemName' onChange={this.onStateChange} value={this.state.problemName}></Form.Control>\r\n            </Form.Group>\r\n            <Form.Group>\r\n                <Form.Label>Grade</Form.Label>\r\n                <Form.Control as='select' name='problemGrade' onChange={this.onStateChange} value={this.state.problemGrade}>\r\n                    {data.vGrades.map(grade => <option key={grade}>{grade}</option>)}\r\n                </Form.Control>\r\n            </Form.Group>\r\n        </Form>)\r\n    }\r\n}\r\n\r\nexport default CircuitDetails;","import React from 'react';\r\nimport { Query } from 'react-apollo';\r\nimport { Container, Button } from 'react-bootstrap';\r\nimport { useHistory } from 'react-router-dom';\r\nimport DeleteButton from './DeleteButton';\r\nimport { GET_PROBLEM_BY_ID } from './Constants/QueriesConstants';\r\nimport { DELETE_PROBLEM_BY_ID } from './Constants/MutationConstants';\r\n\r\nexport default (props) => {\r\n    let id = props.id;\r\n    let history = useHistory();\r\n\r\n    return (<Query query={GET_PROBLEM_BY_ID} variables={{id}}>\r\n    {({ loading, data }) => !loading && (\r\n        <Container>\r\n        <div>\r\n            <h1>{data.problem.name}</h1>\r\n            <h3>Grade: {data.problem.grade}</h3>\r\n            <DeleteButton mutation={DELETE_PROBLEM_BY_ID} itemId={data.problem.id} afterDelete={history.goBack} text=\"Delete\"/>\r\n            <Button onClick={history.goBack}>\r\n                Back\r\n            </Button>\r\n        </div>\r\n        </Container>\r\n    )}\r\n  </Query>\r\n)}","import React, { Component } from 'react';\nimport { HashRouter, Switch, Route } from 'react-router-dom';\nimport { Navbar, Container, Row, Col, Button } from 'react-bootstrap';\nimport { ApolloProvider } from 'react-apollo';\nimport client from './apollo';\nimport { createBrowserHistory } from 'history';\n\nimport Home from './Home';\nimport CenterDetails from './CenterDetails';\nimport CircuitDetails from './CircuitDetails';\nimport ProblemDetails from './ProblemDetails';\nimport { FaGithub } from 'react-icons/fa';\n\nconst history = createBrowserHistory();\n\nclass App extends Component {\n  render() {\n    return (\n    <ApolloProvider client={client}>\n      <HashRouter history={history}>\n        <Navbar bg='dark' variant='dark'>\n        <Container>\n            <Col xs={6}>\n              <Navbar.Brand href='/'>\n              BoulderApp Admin UI\n              </Navbar.Brand>\n            </Col>\n            <Col xs={{ span: 2, offset: 4 }}>\n              <Button href='https://github.com/dillanmann/BoulderApp.React'>\n                <FaGithub />\n              </Button>\n            </Col>\n          </Container>\n        </Navbar>\n        <Switch>          \n          <Route path=\"/\" exact children={x => <Home history={x.history}/>} />          \n          <Route path=\"/center/:id\" children={x => <CenterDetails history={x.history} id={x.match.params.id} />}/>\n          <Route path=\"/circuit/:id\" children={x => <CircuitDetails history={x.history} id={x.match.params.id} />}/>\n          <Route path=\"/problem/:id\" children={x => <ProblemDetails history={x.history} id={x.match.params.id} />}/>\n        </Switch>\n      </HashRouter>\n      </ApolloProvider>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\nReactDOM.render(\r\n  <App/>,\r\n  document.getElementById('root')\r\n);\r\nserviceWorker.unregister();\r\nif (module.hot) module.hot.accept();"],"sourceRoot":""}